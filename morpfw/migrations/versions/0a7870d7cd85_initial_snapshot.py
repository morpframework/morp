"""Initial snapshot

Revision ID: 0a7870d7cd85
Revises: 
Create Date: 2020-02-09 19:14:55.267891

"""
import sqlalchemy as sa

import morpfw.crud.storage.sqlstorage
import sqlalchemy_jsonfield.jsonfield
from alembic import op

# revision identifiers, used by Alembic.
revision = "0a7870d7cd85"
down_revision = None
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()


def upgrade_default():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "authmanager_apikey",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", morpfw.crud.storage.sqlstorage.GUID(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), nullable=True),
        sa.Column("creator", sa.String(length=1024), nullable=True),
        sa.Column("modified", sa.DateTime(timezone=True), nullable=True),
        sa.Column("state", sa.String(length=1024), nullable=True),
        sa.Column("deleted", sa.DateTime(timezone=True), nullable=True),
        sa.Column("blobs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("xattrs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("userid", morpfw.crud.storage.sqlstorage.GUID(), nullable=True),
        sa.Column("label", sa.String(length=256), nullable=True),
        sa.Column("api_identity", sa.String(length=40), nullable=True),
        sa.Column("api_secret", sa.String(length=40), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_authmanager_apikey_uuid"), "authmanager_apikey", ["uuid"], unique=True
    )
    op.create_table(
        "authmanager_groups",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", morpfw.crud.storage.sqlstorage.GUID(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), nullable=True),
        sa.Column("creator", sa.String(length=1024), nullable=True),
        sa.Column("modified", sa.DateTime(timezone=True), nullable=True),
        sa.Column("state", sa.String(length=1024), nullable=True),
        sa.Column("deleted", sa.DateTime(timezone=True), nullable=True),
        sa.Column("blobs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("xattrs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("parent", sa.String(length=256), nullable=True),
        sa.Column("groupname", sa.String(length=256), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_authmanager_groups_uuid"), "authmanager_groups", ["uuid"], unique=True
    )
    op.create_table(
        "authmanager_users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", morpfw.crud.storage.sqlstorage.GUID(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), nullable=True),
        sa.Column("creator", sa.String(length=1024), nullable=True),
        sa.Column("modified", sa.DateTime(timezone=True), nullable=True),
        sa.Column("state", sa.String(length=1024), nullable=True),
        sa.Column("deleted", sa.DateTime(timezone=True), nullable=True),
        sa.Column("blobs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("xattrs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("username", sa.String(length=256), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("password", sa.String(length=1024), nullable=True),
        sa.Column("source", sa.String(length=1024), nullable=True),
        sa.Column("nonce", sa.String(length=24), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_authmanager_users_uuid"), "authmanager_users", ["uuid"], unique=True
    )
    op.create_table(
        "authmanager_membership",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", morpfw.crud.storage.sqlstorage.GUID(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), nullable=True),
        sa.Column("creator", sa.String(length=1024), nullable=True),
        sa.Column("modified", sa.DateTime(timezone=True), nullable=True),
        sa.Column("state", sa.String(length=1024), nullable=True),
        sa.Column("deleted", sa.DateTime(timezone=True), nullable=True),
        sa.Column("blobs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("xattrs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["authmanager_groups.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["authmanager_users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_authmanager_membership_uuid"),
        "authmanager_membership",
        ["uuid"],
        unique=True,
    )
    op.create_table(
        "authmanager_roleassignment",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", morpfw.crud.storage.sqlstorage.GUID(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), nullable=True),
        sa.Column("creator", sa.String(length=1024), nullable=True),
        sa.Column("modified", sa.DateTime(timezone=True), nullable=True),
        sa.Column("state", sa.String(length=1024), nullable=True),
        sa.Column("deleted", sa.DateTime(timezone=True), nullable=True),
        sa.Column("blobs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("xattrs", sqlalchemy_jsonfield.jsonfield.JSONField(), nullable=True),
        sa.Column("membership_id", sa.Integer(), nullable=True),
        sa.Column("rolename", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["membership_id"], ["authmanager_membership.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_authmanager_roleassignment_uuid"),
        "authmanager_roleassignment",
        ["uuid"],
        unique=True,
    )
    # ### end Alembic commands ###


def downgrade_default():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_authmanager_roleassignment_uuid"),
        table_name="authmanager_roleassignment",
    )
    op.drop_table("authmanager_roleassignment")
    op.drop_index(
        op.f("ix_authmanager_membership_uuid"), table_name="authmanager_membership"
    )
    op.drop_table("authmanager_membership")
    op.drop_index(op.f("ix_authmanager_users_uuid"), table_name="authmanager_users")
    op.drop_table("authmanager_users")
    op.drop_index(op.f("ix_authmanager_groups_uuid"), table_name="authmanager_groups")
    op.drop_table("authmanager_groups")
    op.drop_index(op.f("ix_authmanager_apikey_uuid"), table_name="authmanager_apikey")
    op.drop_table("authmanager_apikey")
    # ### end Alembic commands ###
